#!/bin/bash

# This script is used to manage dependabot PRs and assumes you have merge queue enabled.
#
# Docs:
# - Search values for "status": https://docs.github.com/en/rest/guides/using-the-rest-api-to-interact-with-checks
# https://docs.github.com/en/search-github/searching-on-github/searching-issues-and-pull-requests#search-by-commit-status

# Filter on dev dependencies only
# NOTE: requires that PRs are labeled with "chore(dev-deps)". This can be achieved with dependabot config:
#
# ```yaml
# commit-message:
#   prefix: "chore"
#   include: "scope"
# ````
#
# NOTE: GitHub cannot search certain characters, see https://github.com/isaacs/github/issues/402
if [[ "$1" == "--dev" ]]; then
	# shift
	filter_dev="chore(dev-deps) in:title"
	echo "Filtering on dev dependencies only, using search term '$filter_dev'"
else
	filter_dev=""
fi

failing_prs=""
pending_prs=""
successful_prs=""
for pr_id in $(gh pr list --json number -q '.[].number' --search "is:open draft:false $filter_dev"); do
	checks=$(gh pr checks $pr_id 2>&1)

	# debug
	# echo $checks

	# Assuming "success" is the keyword for a successful check
	if echo "$checks" | grep -q 'fail'; then
		failing_prs="$failing_prs"$'\n'"$pr_id"
	elif echo "$checks" | grep -q 'pending'; then
		pending_prs="$pending_prs"$'\n'"$pr_id"
	else
		successful_prs="$successful_prs"$'\n'"$pr_id"
	fi
done

echo "Found failing PRs: $failing_prs"
echo "Found pending PRs: $pending_prs"
echo "Found successful PRs: $successful_prs"

# Iterate over each PR which has no CI failure
for pr_number in $successful_prs; do

	if gh pr view "$pr_number" --json mergeable --jq '.mergeable' | grep -q CONFLICTING; then
		echo "Found conflict, asking dependabot to recreate $pr_number"
		gh pr comment "$pr_number" --body "@dependabot recreate"

	# elif gh pr view "$pr_number" --json mergeStateStatus --jq '.mergeStateStatus' | grep -q BEHIND; then
	# 	if gh pr view 2392 --json body --jq '.body' | grep "Dependabot is rebasing this PR"; then
	# 		echo "Dependabot is rebasing this PR, skipping $pr_number"
	# 	else
	# 		echo "Found behind PR, asking dependabot to rebase $pr_number"
	# 		gh pr comment "$pr_number" --body "@dependabot rebase"
	# 	fi

	else
		echo "Processing $pr_number for merging..."

		# debug
		gh pr view "$pr_number" --json mergeStateStatus

		if ! gh pr view "$pr_number" --json reviewDecision --jq '.reviewDecision' | grep -q APPROVED; then
			echo "Approving PR $pr_number"
			gh pr review --approve "$pr_number"
		else
			echo "PR $pr_number already approved"
		fi

		echo "Merging PR $pr_number"
		gh pr merge "$pr_number" --auto
	fi

done

# Iterate over PRs with failed CI checks
for pr_number in $failing_prs; do
	echo "Showing failed checks for $pr_number"
	gh pr checks "$pr_number"
done
