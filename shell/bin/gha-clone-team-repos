#!/bin/bash
# Take access token, organization name, and team name as arguments
# The access token needs the following scopes:
# - read:org to read organization information
# - repo to access private repositories of the organization

# Function to display debug output if debug flag is set
debug_echo() {
	if [ "$DEBUG" = true ]; then
		echo "$1"
	fi
}

# Initialize variables
DEBUG=false
PER_PAGE=100

# Parse command line options
while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	--debug)
		DEBUG=true
		shift
		;;
	*)
		break
		;;
	esac
done
access_token=$1
org_name=$2
team_slug=$3

# Check if all arguments are provided
if [ -z "$access_token" ] || [ -z "$org_name" ] || [ -z "$team_slug" ]; then
	echo "Usage: $0 [--debug] <access_token> <org_name> <team_slug>"
	exit 1
fi

# Get list of repos for the team, using the team slug
debug_echo "Getting repositories for the team..."
page=1
all_repos=""
no_more_repos=false
while [ "$no_more_repos" = false ]; do
	repos_response=$(
		curl -s \
			-H "Accept: application/vnd.github+json" \
			-H "Authorization: Bearer $access_token" \
			-H "XitHub-Api-Version: 2022-11-28" \
			"https://api.github.com/orgs/$org_name/teams/$team_slug/repos?per_page=$PER_PAGE&page=$page" | jq -c .
	)
	debug_echo "$(echo "$repos_response" | jq .)"
	repos=$(echo "$repos_response" | jq -c '.[]')
	if [ -z "$repos" ]; then
		debug_echo "No more repositories found for the team."
		no_more_repos=true
	else
		all_repos="$all_repos $repos"
		((page++))
	fi
done

# Summarize the team's repositories
echo "Summary of the team's repositories:"
repo_count=0
IFS=$'\n' # Change the delimiter to newline
for row in $all_repos; do
	repo_url=$(echo "$row" | jq -r '.html_url')
	if [ "$repo_url" != "null" ]; then
		echo "$repo_url"
		((repo_count++))
	fi
done
IFS=$' ' # Restore the original delimiter
echo "Total number of repositories: $repo_count"

# Ask for confirmation
read -p "Do you want to clone these repositories? (y/n) " -n 1 -r

# Loop over all repos and clone into different directories based on their status
IFS=$'\n' # Change the delimiter to newline
for row in $all_repos; do
	repo=$(echo "$row" | jq -r '.ssh_url')
	repo_name=$(echo "$row" | jq -r '.name')
	private=$(echo "$row" | jq -r '.private')
	archived=$(echo "$row" | jq -r '.archived')
	dir=""
	if [ "$private" = "true" ]; then
		dir="$HOME/code/work/private/$repo_name"
	elif [ "$private" = "false" ]; then
		dir="$HOME/code/work/public/$repo_name"
	elif [ "$archived" = "true" ]; then
		dir="$HOME/code/work/archived/$repo_name"
	fi
	if [ -n "$dir" ]; then
		if [ -d "$dir" ]; then
			debug_echo "Directory $dir already exists, skipping..."
		else
			debug_echo "Cloning $repo into $dir..."
			git clone --recursive "$repo" "$dir"
		fi
	else
		debug_echo "Warning: Directory not set for $repo, skipping..."
	fi
done
IFS=$' ' # Restore the original delimiter
